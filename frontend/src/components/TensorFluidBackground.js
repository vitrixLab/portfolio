import React, { useEffect, useRef, useState } from 'react';
import axios from 'axios';

const BACKEND_URL = process.env.REACT_APP_BACKEND_URL;
const API = `${BACKEND_URL}/api`;

const TensorFluidBackground = ({ children }) => {
  const containerRef = useRef(null);
  const [backgroundImage, setBackgroundImage] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const intervalRef = useRef(null);\n\n  const fetchTensorFrame = async () => {\n    try {\n      const response = await axios.get(`${API}/fluid-stream`, { \n        timeout: 3000,\n        headers: { 'Accept': 'application/json' }\n      });\n      \n      if (response.data.status === 'success' && response.data.frame) {\n        setBackgroundImage(response.data.frame);\n        if (isLoading) {\n          setIsLoading(false);\n        }\n      }\n    } catch (error) {\n      console.log('Tensor backend not available, using CSS gradient fallback');\n      if (isLoading) {\n        setIsLoading(false);\n      }\n    }\n  };\n\n  useEffect(() => {\n    // Initial fetch\n    fetchTensorFrame();\n    \n    // Set up interval for continuous animation\n    intervalRef.current = setInterval(fetchTensorFrame, 200); // 5 FPS for smooth animation\n    \n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, [isLoading]);\n\n  return (\n    <div ref={containerRef} className=\"relative w-full h-full\">\n      {/* Tensor-based background (when available) */}\n      {backgroundImage && (\n        <div \n          className=\"absolute inset-0 bg-cover bg-center transition-opacity duration-500\"\n          style={{\n            backgroundImage: `url(${backgroundImage})`,\n            opacity: backgroundImage ? 1 : 0,\n            zIndex: 0\n          }}\n        />\n      )}\n      \n      {/* CSS Fallback gradient (always present) */}\n      <div \n        className=\"absolute inset-0 bg-gradient-to-br from-teal-900/40 via-blue-900/30 to-cyan-900/50 transition-opacity duration-500\"\n        style={{\n          opacity: backgroundImage ? 0.3 : 1, // Blend with tensor or show fully\n          zIndex: 1\n        }}\n      />\n      \n      {/* Animated CSS overlay for additional depth */}\n      <div \n        className=\"absolute inset-0 opacity-20 animate-pulse\"\n        style={{\n          background: 'radial-gradient(circle at 30% 40%, rgba(0, 255, 209, 0.15) 0%, transparent 50%), linear-gradient(45deg, rgba(0, 85, 255, 0.1) 0%, rgba(0, 255, 170, 0.1) 100%)',\n          zIndex: 2,\n          animation: 'tensorFlow 8s ease-in-out infinite'\n        }}\n      />\n      \n      {/* Content */}\n      <div className=\"relative z-10\">\n        {children}\n      </div>\n      \n      {/* Loading indicator (brief) */}\n      {isLoading && (\n        <div className=\"absolute inset-0 flex items-center justify-center z-20\">\n          <div className=\"bg-black/50 rounded-lg p-4 text-center backdrop-blur-sm\">\n            <div className=\"w-6 h-6 border-2 border-[#00FFD1] border-t-transparent rounded-full animate-spin mx-auto mb-2\"></div>\n            <p className=\"text-[#00FFD1] text-xs font-medium\">AI Tensor Loading...</p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\n// Add custom animation keyframes\nconst style = document.createElement('style');\nstyle.textContent = `\n  @keyframes tensorFlow {\n    0%, 100% { \n      transform: translateX(0) rotate(0deg);\n      opacity: 0.2;\n    }\n    25% { \n      transform: translateX(10px) rotate(1deg);\n      opacity: 0.3;\n    }\n    50% { \n      transform: translateX(-5px) rotate(-0.5deg);\n      opacity: 0.25;\n    }\n    75% { \n      transform: translateX(15px) rotate(0.5deg);\n      opacity: 0.35;\n    }\n  }\n`;\ndocument.head.appendChild(style);\n\nexport default TensorFluidBackground;"